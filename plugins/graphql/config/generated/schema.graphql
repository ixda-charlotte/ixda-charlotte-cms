input createExecutiveInput {
  data: ExecutiveInput
}

type createExecutivePayload {
  executive: Executive
}

input createLeaderInput {
  data: LeaderInput
}

type createLeaderPayload {
  leader: Leader
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSponsorInput {
  data: SponsorInput
}

type createSponsorPayload {
  sponsor: Sponsor
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteExecutiveInput {
  where: InputID
}

type deleteExecutivePayload {
  executive: Executive
}

input deleteLeaderInput {
  where: InputID
}

type deleteLeaderPayload {
  leader: Leader
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSponsorInput {
  where: InputID
}

type deleteSponsorPayload {
  sponsor: Sponsor
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

"""Executive Committee Member"""
type Executive {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String
  Title: String
  Company: String
  Twitter: String
  LinkedIn: String
  Website: String
  Email: String
}

type ExecutiveAggregator {
  count: Int
}

type ExecutiveConnection {
  values: [Executive]
  groupBy: ExecutiveGroupBy
  aggregate: ExecutiveAggregator
}

type ExecutiveConnection_id {
  key: ID
  connection: ExecutiveConnection
}

type ExecutiveConnectionCompany {
  key: String
  connection: ExecutiveConnection
}

type ExecutiveConnectionCreatedAt {
  key: DateTime
  connection: ExecutiveConnection
}

type ExecutiveConnectionEmail {
  key: String
  connection: ExecutiveConnection
}

type ExecutiveConnectionLinkedIn {
  key: String
  connection: ExecutiveConnection
}

type ExecutiveConnectionName {
  key: String
  connection: ExecutiveConnection
}

type ExecutiveConnectionTitle {
  key: String
  connection: ExecutiveConnection
}

type ExecutiveConnectionTwitter {
  key: String
  connection: ExecutiveConnection
}

type ExecutiveConnectionUpdatedAt {
  key: DateTime
  connection: ExecutiveConnection
}

type ExecutiveConnectionWebsite {
  key: String
  connection: ExecutiveConnection
}

type ExecutiveGroupBy {
  _id: [ExecutiveConnection_id]
  createdAt: [ExecutiveConnectionCreatedAt]
  updatedAt: [ExecutiveConnectionUpdatedAt]
  Name: [ExecutiveConnectionName]
  Title: [ExecutiveConnectionTitle]
  Company: [ExecutiveConnectionCompany]
  Twitter: [ExecutiveConnectionTwitter]
  LinkedIn: [ExecutiveConnectionLinkedIn]
  Website: [ExecutiveConnectionWebsite]
  Email: [ExecutiveConnectionEmail]
}

input ExecutiveInput {
  Name: String
  Title: String
  Company: String
  Twitter: String
  LinkedIn: String
  Website: String
  Email: String
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Leadership board members"""
type Leader {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String
  Title: String
  Bio: String
  Company: String
  Photo: UploadFile
  Twitter: String
  LinkedIn: String
  Website: String
  Email: String
}

type LeaderAggregator {
  count: Int
}

type LeaderConnection {
  values: [Leader]
  groupBy: LeaderGroupBy
  aggregate: LeaderAggregator
}

type LeaderConnection_id {
  key: ID
  connection: LeaderConnection
}

type LeaderConnectionBio {
  key: String
  connection: LeaderConnection
}

type LeaderConnectionCompany {
  key: String
  connection: LeaderConnection
}

type LeaderConnectionCreatedAt {
  key: DateTime
  connection: LeaderConnection
}

type LeaderConnectionEmail {
  key: String
  connection: LeaderConnection
}

type LeaderConnectionLinkedIn {
  key: String
  connection: LeaderConnection
}

type LeaderConnectionName {
  key: String
  connection: LeaderConnection
}

type LeaderConnectionPhoto {
  key: ID
  connection: LeaderConnection
}

type LeaderConnectionTitle {
  key: String
  connection: LeaderConnection
}

type LeaderConnectionTwitter {
  key: String
  connection: LeaderConnection
}

type LeaderConnectionUpdatedAt {
  key: DateTime
  connection: LeaderConnection
}

type LeaderConnectionWebsite {
  key: String
  connection: LeaderConnection
}

type LeaderGroupBy {
  _id: [LeaderConnection_id]
  createdAt: [LeaderConnectionCreatedAt]
  updatedAt: [LeaderConnectionUpdatedAt]
  Name: [LeaderConnectionName]
  Title: [LeaderConnectionTitle]
  Bio: [LeaderConnectionBio]
  Company: [LeaderConnectionCompany]
  Photo: [LeaderConnectionPhoto]
  Twitter: [LeaderConnectionTwitter]
  LinkedIn: [LeaderConnectionLinkedIn]
  Website: [LeaderConnectionWebsite]
  Email: [LeaderConnectionEmail]
}

input LeaderInput {
  Name: String
  Title: String
  Bio: String
  Company: String
  Photo: ID
  Twitter: String
  LinkedIn: String
  Website: String
  Email: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Executive | createExecutivePayload | updateExecutivePayload | deleteExecutivePayload | ExecutiveConnection | ExecutiveAggregator | ExecutiveGroupBy | ExecutiveConnection_id | ExecutiveConnectionCreatedAt | ExecutiveConnectionUpdatedAt | ExecutiveConnectionName | ExecutiveConnectionTitle | ExecutiveConnectionCompany | ExecutiveConnectionTwitter | ExecutiveConnectionLinkedIn | ExecutiveConnectionWebsite | ExecutiveConnectionEmail | Leader | createLeaderPayload | updateLeaderPayload | deleteLeaderPayload | LeaderConnection | LeaderAggregator | LeaderGroupBy | LeaderConnection_id | LeaderConnectionCreatedAt | LeaderConnectionUpdatedAt | LeaderConnectionName | LeaderConnectionTitle | LeaderConnectionBio | LeaderConnectionCompany | LeaderConnectionPhoto | LeaderConnectionTwitter | LeaderConnectionLinkedIn | LeaderConnectionWebsite | LeaderConnectionEmail | Post | createPostPayload | updatePostPayload | deletePostPayload | PostConnection | PostAggregator | PostGroupBy | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionTitle | PostConnectionContent | PostConnectionCover | Sponsor | createSponsorPayload | updateSponsorPayload | deleteSponsorPayload | SponsorConnection | SponsorAggregator | SponsorGroupBy | SponsorConnection_id | SponsorConnectionCreatedAt | SponsorConnectionUpdatedAt | SponsorConnectionName | SponsorConnectionLogo | SponsorConnectionWebsite | Tag | createTagPayload | updateTagPayload | deleteTagPayload | TagConnection | TagAggregator | TagGroupBy | TagConnection_id | TagConnectionCreatedAt | TagConnectionUpdatedAt | TagConnectionName | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createExecutive(input: createExecutiveInput): createExecutivePayload
  updateExecutive(input: updateExecutiveInput): updateExecutivePayload
  deleteExecutive(input: deleteExecutiveInput): deleteExecutivePayload
  createLeader(input: createLeaderInput): createLeaderPayload
  updateLeader(input: updateLeaderInput): updateLeaderPayload
  deleteLeader(input: deleteLeaderInput): deleteLeaderPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createSponsor(input: createSponsorInput): createSponsorPayload
  updateSponsor(input: updateSponsorInput): updateSponsorPayload
  deleteSponsor(input: deleteSponsorInput): deleteSponsorPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Post {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  content: String
  cover: UploadFile
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
}

type PostAggregator {
  count: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnection_id {
  key: ID
  connection: PostConnection
}

type PostConnectionContent {
  key: String
  connection: PostConnection
}

type PostConnectionCover {
  key: ID
  connection: PostConnection
}

type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}

type PostGroupBy {
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  title: [PostConnectionTitle]
  content: [PostConnectionContent]
  cover: [PostConnectionCover]
}

input PostInput {
  title: String
  content: String
  cover: ID
  tags: [ID]
}

type Query {
  executive(id: ID!): Executive
  executives(sort: String, limit: Int, start: Int, where: JSON): [Executive]
  executivesConnection(sort: String, limit: Int, start: Int, where: JSON): ExecutiveConnection
  leader(id: ID!): Leader
  leaders(sort: String, limit: Int, start: Int, where: JSON): [Leader]
  leadersConnection(sort: String, limit: Int, start: Int, where: JSON): LeaderConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  sponsor(id: ID!): Sponsor
  sponsors(sort: String, limit: Int, start: Int, where: JSON): [Sponsor]
  sponsorsConnection(sort: String, limit: Int, start: Int, where: JSON): SponsorConnection
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Sponsor {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String
  Logo: UploadFile
  Website: String
}

type SponsorAggregator {
  count: Int
}

type SponsorConnection {
  values: [Sponsor]
  groupBy: SponsorGroupBy
  aggregate: SponsorAggregator
}

type SponsorConnection_id {
  key: ID
  connection: SponsorConnection
}

type SponsorConnectionCreatedAt {
  key: DateTime
  connection: SponsorConnection
}

type SponsorConnectionLogo {
  key: ID
  connection: SponsorConnection
}

type SponsorConnectionName {
  key: String
  connection: SponsorConnection
}

type SponsorConnectionUpdatedAt {
  key: DateTime
  connection: SponsorConnection
}

type SponsorConnectionWebsite {
  key: String
  connection: SponsorConnection
}

type SponsorGroupBy {
  _id: [SponsorConnection_id]
  createdAt: [SponsorConnectionCreatedAt]
  updatedAt: [SponsorConnectionUpdatedAt]
  Name: [SponsorConnectionName]
  Logo: [SponsorConnectionLogo]
  Website: [SponsorConnectionWebsite]
}

input SponsorInput {
  Name: String
  Logo: ID
  Website: String
}

type Tag {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
}

type TagAggregator {
  count: Int
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagConnection_id {
  key: ID
  connection: TagConnection
}

type TagConnectionCreatedAt {
  key: DateTime
  connection: TagConnection
}

type TagConnectionName {
  key: String
  connection: TagConnection
}

type TagConnectionUpdatedAt {
  key: DateTime
  connection: TagConnection
}

type TagGroupBy {
  _id: [TagConnection_id]
  createdAt: [TagConnectionCreatedAt]
  updatedAt: [TagConnectionUpdatedAt]
  name: [TagConnectionName]
}

input TagInput {
  name: String
  posts: [ID]
}

input updateExecutiveInput {
  where: InputID
  data: ExecutiveInput
}

type updateExecutivePayload {
  executive: Executive
}

input updateLeaderInput {
  where: InputID
  data: LeaderInput
}

type updateLeaderPayload {
  leader: Leader
}

input updatePostInput {
  where: InputID
  data: PostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSponsorInput {
  where: InputID
  data: SponsorInput
}

type updateSponsorPayload {
  sponsor: Sponsor
}

input updateTagInput {
  where: InputID
  data: TagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
